{"remainingRequest":"E:\\vue-crud\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\vue-crud\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\vue-crud\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\vue-crud\\src\\views\\Home.vue?vue&type=template&id=fae5bece&","dependencies":[{"path":"E:\\vue-crud\\src\\views\\Home.vue","mtime":1586490733511},{"path":"E:\\vue-crud\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue-crud\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"E:\\vue-crud\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue-crud\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}